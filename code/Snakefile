SAMPLES, = glob_wildcards('data/fastq/{sample}_R1.fastq.gz')
CORES = 12
RAM = "64G"

rule all:
    input:
        # expand('intermediate/fastQC/{sample}_R1_fastqc.zip', sample=SAMPLES),
        # expand('intermediate/fastQC/{sample}_R2_fastqc.zip', sample=SAMPLES),
        # 'intermediate/STAR/GRCh38/',
        # expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
        #          sample=SAMPLES),
        # expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.toTranscriptome.out.bam',
        #          sample=SAMPLES),
        # 'results/tables/featureCounts/featureCounts_counts_gene.csv.gz',
        # 'results/tables/featureCounts/featureCounts_counts_exon.csv.gz',
        # 'results/tables/featureCounts/featureCounts_counts_exon.csv.jcounts.gz',
        # 'results/reports/multiQC/multiqc_report.html',
        # 'intermediate/DEXSeq/DEXSeq_symbol.gtf',
        # expand('results/tables/DEXSeq/{sample}.csv', sample=SAMPLES),
        # 'intermediate/featureCounts/featureCounts_counts_exon_renamed.csv',
        # 'intermediate/rMATS/',
        # expand('results/figures/rMATS_rmats2sashimiplot_{Jtype}', Jtype=['SE','A5SS','A3SS','MXE','RI']),
        # expand('results/tables/salmon/{sample}/quant.sf.gz', sample=SAMPLES),
        'intermediate/gene_coord_strand.csv'

rule download_genome:
    output:
        'data/reference/GRCh38.primary_assembly.genome.fa'
    log:
        "logs/wget_genome_fasta.log"
    params:
        url = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_35/GRCh38.primary_assembly.genome.fa.gz'
    shell:
        '''
        export ftp_proxy=http://192.168.100.1:80
        wget -v -o {log} -P data/reference {params.url}
        gunzip {output}.gz
        '''

rule download_transcripts:
    output:
        'data/reference/gencode.v35.transcripts.fa.gz'
    log:
        "logs/wget_genome_fasta.log"
    params:
        url = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_35/gencode.v35.transcripts.fa.gz'
    shell:
        '''
        export ftp_proxy=http://192.168.100.1:80
        wget -v -o {log} -P data/reference {params.url}
        '''

rule download_genome_GTF:
    output:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    log:
        "logs/wget_genome_GTF_fasta.log"
    params:
        url = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_35/gencode.v35.primary_assembly.annotation.gtf.gz'
    shell:
        '''
        export ftp_proxy=http://192.168.100.1:80
        wget -v -o {log} -P data/reference {params.url}
        gunzip {output}.gz
        '''

rule download_genome_GFF3:
    output:
        'data/reference/gencode.v35.primary_assembly.annotation.gff3'
    log:
        "logs/wget_genome_GTF_fasta.log"
    params:
        url = 'ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_35/gencode.v35.primary_assembly.annotation.gff3.gz'
    shell:
        '''
        export ftp_proxy=http://192.168.100.1:80
        wget -v -o {log} -P data/reference {params.url}
        gunzip {output}.gz
        '''

rule STAR_index:
    input:
        fa = 'data/reference/GRCh38.primary_assembly.genome.fa',
        gtf = 'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        outdir = directory('intermediate/STAR/GRCh38/'),
    threads:
        CORES
    log:
        'logs/STAR/index.log'
    shell:
        '''
        mkdir -p {output.outdir}
        STAR --runThreadN {threads} \
            --runMode genomeGenerate \
            --genomeDir {output} \
            --genomeFastaFiles {input.fa} \
            --sjdbGTFfile {input.gtf} \
            --sjdbOverhang 100 \
            > {log}
        '''

rule STAR_pass1:
    input:
        R1 = 'data/fastq/{sample}_R1.fastq.gz',
        R2 = 'data/fastq/{sample}_R2.fastq.gz',
        refdir = 'intermediate/STAR/GRCh38/',
    params:
        outdir = 'intermediate/STAR/{sample}_pass1/{sample}.',
    output:
        'intermediate/STAR/{sample}_pass1/{sample}.SJ.out.tab'
    threads:
        CORES
    log:
        'logs/STAR/{sample}_pass1.log'
    shell:
        '''
        STAR --runThreadN {threads} \
            --genomeDir {input.refdir} \
            --readFilesIn {input.R1} {input.R2} \
            --readFilesCommand zcat \
            --outSAMtype BAM Unsorted \
            --outFileNamePrefix {params.outdir} \
            > {log}
        rm {params.outdir}Aligned.out.bam \
            {params.outdir}Log.out \
            {params.outdir}Log.progress.out
        '''

rule STAR_filter:
    input:
        'intermediate/STAR/{sample}_pass1/{sample}.SJ.out.tab',
    output:
        'intermediate/STAR/SJ/{sample}_pass1_SJ.filtered.tab'
    shell:
        '''
        awk "{{if (\$7 >= 3) print \$0}}" {input} > {output}
        '''

rule STAR_pass2:
    input:
        R1 = 'data/fastq/{sample}_R1.fastq.gz',
        R2 = 'data/fastq/{sample}_R2.fastq.gz',
        SJfiles = expand('intermediate/STAR/SJ/{sample}_pass1_SJ.filtered.tab',
                         sample=SAMPLES),
        refdir = 'intermediate/STAR/GRCh38/'
    params:
        outdir = 'intermediate/STAR/{sample}_pass2/{sample}.',
    output:
        'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
        'intermediate/STAR/{sample}_pass2/{sample}.Aligned.toTranscriptome.out.bam',
        'intermediate/STAR/{sample}_pass2/{sample}.Log.final.out',
    threads:
        CORES
    log:
        'logs/STAR/{sample}_pass2.log'
    shell:
        '''
        STAR --runThreadN {threads} \
            --genomeDir {input.refdir} \
            --readFilesIn {input.R1} {input.R2} \
            --sjdbFileChrStartEnd {input.SJfiles} \
            --quantMode GeneCounts TranscriptomeSAM \
            --readFilesCommand zcat \
            --outSAMtype BAM Unsorted \
            --outFileNamePrefix {params.outdir} \
            > {log}
        '''

rule qualimap:
    input:
        bam = 'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
        gtf = 'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        stats = 'intermediate/qualimap/{sample}_qualimap/rnaseq_qc_results.txt',
        report = 'intermediate/qualimap/{sample}_qualimap/qualimapReport.html',
        datadir = directory('intermediate/qualimap/{sample}_qualimap/raw_data_qualimapReport')
    params:
        ram = RAM,
        dir = 'intermediate/qualimap/{sample}_qualimap'
    log:
        'logs/qualimap/{sample}_qualimap.log'
    shell:
        '''
        qualimap rnaseq \
            --java-mem-size={params.ram} \
            --paired \
            --sorted \
            -bam {input.bam} \
            -gtf {input.gtf}  \
            -outdir {params.dir} \
            &> {log}
        '''

rule featureCounts:
    input:
        bam = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
                     sample=SAMPLES),
        gtf = 'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        counts = 'intermediate/featureCounts/featureCounts_counts_gene.csv',
        log = 'logs/featureCounts_gene.log',
    threads:
        CORES
    shell:
        '''
        featureCounts \
            -T {threads} \
            -p \
            -s 2 \
            -t exon \
            -g gene_id \
            -a {input.gtf} \
            -o {output.counts} \
            {input.bam} \
            &> {output.log}
        '''

rule columnRename:
    input:
        'intermediate/featureCounts/featureCounts_counts_gene.csv'
    output:
        'results/tables/featureCounts/featureCounts_counts_gene.csv'
    params:
        '\t'.join(str(e) for e in expand('{sample}', sample=SAMPLES))
    shell:
        '''
        cut -f 1,6- {input} | \
            tail -n +3 | \
            sed -e "1igene\\tlength\\t{params}" -e "s/gene://" | \
            (sed -u 1q; sort) \
            > {output}
        '''

rule featureCounts_exon:
    input:
        bam = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
                     sample=SAMPLES),
        gtf = 'data/reference/gencode.v35.primary_assembly.annotation.gtf',
        fa = 'data/reference/GRCh38.primary_assembly.genome.fa'
    output:
        counts = 'intermediate/featureCounts/featureCounts_counts_exon.csv',
        jcounts = 'intermediate/featureCounts/featureCounts_counts_exon.csv.jcounts',
        summary = 'intermediate/featureCounts/featureCounts_counts_exon.csv.summary',
        log = 'logs/featureCounts_exon.log',
    threads:
        CORES
    shell:
        '''
	featureCounts \
            -T {threads} \
            -p -f -C -O \
            -G {input.fa} \
            -g exon_id \
            -a {input.gtf} \
            -o {output.counts} \
            {input.bam} \
            &> {output.log}
        '''

rule columnRename_exon:
    input:
        'intermediate/featureCounts/featureCounts_counts_exon.csv'
    output:
        'intermediate/featureCounts/featureCounts_counts_exon_renamed.csv'
    params:
        '\t'.join(str(e) for e in expand('{sample}', sample=SAMPLES))
    shell:
        '''
        awk 'NR==2 {{print "exon",$2,$3,$4,$5,$6,"{params}"}}; NR>2 {{print $0}}' \
            {input} > {output}
        '''

rule extract_genes_exons:
    input:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        'intermediate/exon2gene.csv'
    shell:
        '''
        awk '$3=="exon"' {input} | \
            cut -f 9 | cut -d ";" -f 1,8 | sed 's/gene_id //;s/; exon_id//' \
            > {output}
       '''

rule add_genes_exons:
    input:
        data = 'intermediate/featureCounts/featureCounts_counts_exon_renamed.csv',
        exon_gene = 'intermediate/exon2gene.csv'
    output:
        'results/tables/featureCounts/featureCounts_counts_exon.csv'
    shell:
        '''
        Rscript code/exon2gene.R {input.data} {input.exon_gene} {output}
        '''

rule columnRename_jcounts:
    input:
        'intermediate/featureCounts/featureCounts_counts_exon.csv.jcounts'
    output:
        'results/tables/featureCounts/featureCounts_counts_exon.csv.jcounts'
    params:
        '\t'.join(str(e) for e in expand('{sample}', sample=SAMPLES))
    shell:
        '''
        awk 'NR==1 {{print "exon",$2,$3,$4,$5,$6,$7,$8,"{params}"}}; NR>1 {{print $0}}' \
            {input} > {output}
        '''

rule multiqc:
    input:
        expand('intermediate/fastQC/{sample}_R1_fastqc.zip', sample=SAMPLES),
        expand('intermediate/fastQC/{sample}_R2_fastqc.zip', sample=SAMPLES),
        expand('intermediate/qualimap/{sample}_qualimap/rnaseq_qc_results.txt',
                sample=SAMPLES),
        expand('intermediate/qualimap/{sample}_qualimap/raw_data_qualimapReport',
                sample=SAMPLES),
        expand('intermediate/STAR/{sample}_pass2/{sample}.Log.final.out',
                sample=SAMPLES),
        'intermediate/featureCounts/featureCounts_counts_exon.csv',
        'intermediate/featureCounts/featureCounts_counts_exon.csv.jcounts',
        'intermediate/featureCounts/featureCounts_counts_exon.csv.summary',
        'logs/featureCounts_exon.log'
    output:
        html = 'results/reports/multiQC/multiqc_report.html',
        data = directory('results/reports/multiQC/multiqc_report_data/')
    log:
        'logs/multiQC/multiqc.log'
    shell:
        '''
        multiqc \
            -f \
            -n {output.html} \
            {input} \
            &> {log}
        '''

rule featureCounts_gz:
    input:
        'results/tables/featureCounts/featureCounts_counts_gene.csv',
        'results/tables/featureCounts/featureCounts_counts_exon.csv',
        'results/tables/featureCounts/featureCounts_counts_exon.csv.jcounts'
    output:
        'results/tables/featureCounts/featureCounts_counts_gene.csv.gz',
        'results/tables/featureCounts/featureCounts_counts_exon.csv.gz',
        'results/tables/featureCounts/featureCounts_counts_exon.csv.jcounts.gz'
    shell:
        '''
        gzip {input}
        '''

rule dexseq_prepare_annotation:
    input:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        gtf = 'intermediate/DEXSeq/DEXSeq.gtf',
        log = 'logs/dexseq_prepare_annotation.log',
    shell:
        '''
        python ~/.conda/envs/myocardin/lib/R/library/DEXSeq/python_scripts/dexseq_prepare_annotation.py \
        {input} \
        {output.gtf} \
        &> {output.log}
        '''

rule id_symbol:
    input:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf'
    output:
        'intermediate/DEXSeq/id_symbol.sh'
    shell:
        '''
        tail -n +6 {input} | \
            sed 's/"//g;s/;//g' | \
            awk '$3=="gene" {{printf "s/%s/%s_%s/g\\n", $10,$10,$14}}' | \
            sed 's/THRA1\/BTR/THRA1\\\\\/BTR/g' \
            > {output}
        '''

rule add_symbol_to_EnsemblIDs:
    input:
        sh = 'intermediate/DEXSeq/id_symbol.sh',
        gtf = 'intermediate/DEXSeq/DEXSeq.gtf'
    output:
        'intermediate/DEXSeq/DEXSeq_symbol.gtf'
    shell:
        '''
        sed -f {input.sh} {input.gtf} > {output}
        '''

rule dexseq_count:
    input:
        bam = 'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
        gtf = 'intermediate/DEXSeq/DEXSeq_symbol.gtf'
    output:
        counts = 'results/tables/DEXSeq/{sample}.csv',
        log = 'logs/dexseq_count_{sample}.log'
    shell:
        '''
        python ~/.conda/envs/myocardin/lib/R/library/DEXSeq/python_scripts/dexseq_count.py \
            -p yes -r name -s reverse -f bam \
            {input.gtf} \
            {input.bam} \
            {output.counts} \
            &> {output.log}
        '''

rule rMATS:
    input:
        bam = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam',
              sample=SAMPLES),
        gtf = 'data/reference/gencode.v35.primary_assembly.annotation.gtf',
        b1 = 'conf/rMATS_CMV_bam.txt',
        b2 = 'conf/rMATS_MYO_bam.txt'
    output:
        out = directory('intermediate/rMATS/'),
        tmp = temp(directory("intermediate/rMATS_tmp")),
        log = 'logs/rMATS.log'
    threads:
        CORES
    shell:
        '''
        rmats.py \
            --b1 {input.b1} \
            --b2 {input.b2} \
            --gtf {input.gtf} \
            -t paired \
            --libType fr-firststrand \
            --allow-clipping \
            --readLength 73 \
            --nthread {threads} \
            --od {output.out} \
            --tmp {output.tmp} \
            &> {output.log}
        '''

rule sort_bam:
    input:
        bam = 'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.bam'
    output:
        bam = 'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.sorted.bam',
        bai = 'intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.sorted.bam.bai'
    threads:
        CORES
    shell:
        '''
        samtools sort -@ {threads} -o {output.bam} {input.bam}
        samtools index -@ {threads} {output.bam}
        '''

# rmats2sashimiplot gives no-crucial errors and fails in Snakemake (non-zero exit error).
# Use condor direct submission: rmats2sashimiplot.condorjob rmats2sashimiplot.sh
rule rmats2sashimiplot:
    input:
        CMV = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.sorted.bam',
              sample=['CMV1','CMV2','CMV4','CMV5']),
        MYO = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.sorted.bam',
              sample=['MYO1','MYO2','MYO4','MYO5']),
        bai = expand('intermediate/STAR/{sample}_pass2/{sample}.Aligned.out.sorted.bam.bai',
              sample=SAMPLES),
        gff3 = 'data/reference/gencode.v35.primary_assembly.annotation.gff3',
        res = 'intermediate/rMATS/SE.MATS.JC.txt',
        gf = 'conf/grouping.gf'
    params:
        CMV = lambda wildcards, input: ','.join(input.CMV),
        MYO = lambda wildcards, input: ','.join(input.CMV),
        Jtype = '{Jtype}'
    output:
        out = directory('results/tables/rMATS_rmats2sashimiplot_{Jtype}'),
        log = 'logs/rmats2sashimiplot_{Jtype}.log'
    shell:
        '''
        rmats2sashimiplot \
            --b1 {params.CMV}
            --b2 {params.MYO}
            -t {params.Jtype} \
            -e {input.res} \
            --l1 CMV \
            --l2 MYO \
            -o {output.out} \
            --group-info {input.gf} \
            &> {output.log}
        '''

rule salmon_index:
    input:
        'data/reference/gencode.v35.transcripts.fa.gz'
    output:
        dir = directory('intermediate/salmon_index'),
    threads:
        CORES
    log:
        'logs/salmon/salmon_index.log'
    shell:
        '''
        salmon index \
            -p {threads} \
            --gencode \
            -t {input} \
            -i {output.dir} \
            2> {log}
        '''

rule salmon_quant:
    input:
        ref = 'intermediate/salmon_index',
        R1 = 'data/fastq/{sample}_R1.fastq.gz',
        R2 = 'data/fastq/{sample}_R2.fastq.gz'
    output:
        quant = 'results/tables/salmon/{sample}/quant.sf',
    params:
        out_dir = 'results/tables/salmon/{sample}'
    threads:
        CORES
    log:
        'logs/salmon/{sample}_quant.log'
    shell:
        '''
        salmon quant \
            -p {threads} \
            -l A \
            -i {input.ref} \
            -1 {input.R1} \
            -2 {input.R2} \
            --seqBias \
            --gcBias \
            --validateMappings \
            -o {params.out_dir} 2> {log}
        '''

rule sf_gzip:
    input:
        quant = 'results/tables/salmon/{sample}/quant.sf'
    output:
        quant = 'results/tables/salmon/{sample}/quant.sf.gz'
    shell:
        '''
        gzip -c {input.quant} > {output.quant}
        '''

rule transcript2gene:
    input:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf.gz'
    output:
        'intermediate/transcript2gene.csv'
    shell:
        '''
        zcat {input} | \
            awk '$3=="transcript"' | \
            cut -f 9 | \
            cut -d ";" -f 1,2 | \
            sed 's/gene_id //;s/; transcript_id//' \
            > {output}
       '''

rule salmon_TPM:
    input:
        quant = 'results/tables/salmon/{sample}/quant.sf.gz',
        tx2gene = intermediate/transcript2gene.csv
    output:
        tpm = expand('results/tables/salmon/salmon_TPM_{cond}.csv',
                cond=['CMV', 'MYO'])
    shell:
        '''
        Rscript code/salmon2TPM.R
        '''

rule gene_coord_strand:
    input:
        'data/reference/gencode.v35.primary_assembly.annotation.gtf.gz'
    output:
        'intermediate/gene_coord_strand.csv'
    shell:
        '''
        zcat {input} | \
            awk '$3=="gene"' | \
            cut -f 1,4,5,7,9 | \
            cut -d ";" -f 1,3 | \
            sed 's/gene_id //;s/; gene_name /\t/g;s/"//g;' \
            > {output}
       '''
